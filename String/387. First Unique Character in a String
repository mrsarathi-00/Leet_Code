387. First Unique Character in a String

Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"

Output: 0

Explanation:

The character 'l' at index 0 is the first character that does not occur at any other index.

Example 2:

Input: s = "loveleetcode"

Output: 2

Example 3:

Input: s = "aabb"

Output: -1

 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.

/////////////////////////////////////////////////////////////////// BRUTE FORCE /////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public int firstUniqChar(String s) {
        for (int i = 0; i < s.length(); i++)
            if (s.indexOf(s.charAt(i)) == s.lastIndexOf(s.charAt(i))) return i;
        return -1;
    }
}

/////////////////////////////////////////////////////////////////// BETTER SOLUTION /////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public int firstUniqChar(String s) {
        int count[] = new int[26];

        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }

        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] == 1)
                return i;
        }
        return -1;
        
    }
}

/////////////////////////////////////////////////////////////////// OPTIMAL /////////////////////////////////////////////////////////////////////////////////////

class Solution {

    static {
        // Warm-up to trigger JIT compilation
        for (int i = 0; i < 200; i++) {
            firstUniqChar("a");
        }
    }

    public static int firstUniqChar(String s) {
        
        int[] charset = new int[26];
        int[] indices = new int[26];

        int ind, i = 0;

        i = 0;
        while (i < s.length()) {
            ind = s.charAt(i) - 'a';
            charset[ind] += 1;
            if (indices[ind] == 0)
                indices[ind] = i;
            i++;
        }

        ind = Integer.MAX_VALUE;

        for (i = 0; i < 26; i++) {
            if (charset[i] == 1 && indices[i] < ind)
                ind = indices[i];
        }

        return ind == Integer.MAX_VALUE ? -1 : ind;


    }
}
